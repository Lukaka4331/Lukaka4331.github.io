{"pages":[],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/05/08/hello-world/"},{"title":"資料標籤處理(Tag_Process)","text":"使用套件12345import requestsfrom bs4 import BeautifulSoupimport pandas as pdimport refrom tqdm.notebook import tqdm tag替換字元 1234list_text = ['#網美必拍#夏天戲水#單車漫遊#逛老街']NEW_String = list(map(lambda list_text: list_text.replace('#網美必拍','#打卡熱點'), list_text))print(list_text)print(NEW_String) input:[‘#網美必拍#夏天戲水#單車漫遊#逛老街’]output:[‘#打卡熱點#夏天戲水#單車漫遊#逛老街’] 判斷功能12345data_2020_ok=[data_tag[4]]print(data_2020_ok)print('#網美必拍' in data_2020_ok[0])x = \"hello world\"print('hello' in x) output_1 : [‘#網美必拍#夏天戲水#單車漫遊#逛老街’]output_2 : Trueoutput_3 : True 替換字元+判斷功能12345678910111213141516data_try={}data_try['try_tag']=[]data_2020_ok=[data_tag[4]]#判斷字串中有無在陣列裡if '#網美必拍' in data_2020_ok[0] or '#文青必訪' in data_2020_ok[0]:#如果有，進行替換自元的處理 print('have') data_process_1 = list(map(lambda data_2020_ok: data_2020_ok.replace('#網美必拍','#打卡熱點'), data_2020_ok)) data_try['try_tag'].extend(data_process_1) print(data_try['try_tag']) else :#如果沒有，輸出原陣列 print('not have') print(data_2020_ok) 條件成立: output_1 : have output_2 : [‘#打卡熱點#夏天戲水#單車漫遊#逛老街’] 不需要的tag台灣燈會生態體驗部落旅遊戰地文化鐵道旅遊","link":"/2020/05/10/tag-process/"},{"title":"CNN原理","text":"Intorduce既然有了NN層，為什麼還需要CNN呢?有兩個觀念分享 權值共享 假如是一般的FC架構，我們輸入一張28281的灰階照片(784個特徵)，隱藏層使用100個神經元，那麼我們需要多少個參數？答案是：100*784 (weights)+100 (bias)= 78500個參數 哇！單單一層隱藏層參數就瞬間爆量，然而，如果我們使用CNN層的話情況就有所不同了。CNN權值共享的概念可以這樣想像:在一般的圖像內有許多的特徵是相同的，如特定的輪廓或線條，那我們就可以讓相同幾個神經元組成的卷積核去學這個特徵，透過滑動窗口對整張圖片進行卷積，進而達到節省參數的效果，聽起來有有點抽象？別擔心，詳細原理容我留到下方解釋。 保留位置資訊 CNN還有一大特色就是能保留圖像的位置資訊，不難想像圖片中的像素 (Pixels)與其鄰近的像素會有一定的關聯度，如果我們使用FC的結構來訓練圖像資訊的話，要先通過一個展開(Flatten)的步驟，把高維的資訊拉成一條直線，如此一來就會大量失去特徵之間的空間資訊，效果當然會大打折扣。","link":"/2020/05/25/CNN%E5%8E%9F%E7%90%86/"},{"title":"製造資料分析","text":"Introduction甚麼是異常檢測(Anomaly/Outlier detection) .blue { color: blue; } .red { color: red; } .orange { color: orange; } .purple { color: purple; } 區分資料是正常還是異常 異常檢測的性質 異常檢測與正常資料有差異 異常檢測→罕見資料(==1%==) 那些情境會遇到異常資料 設備機台、網路瀏覽、信用卡紀錄 基於統計/傳統機器學習所提出的異常檢測方法理想狀況下的的異常檢測 Source from: Pattern Recognition “Anomaly Detection Challenges” 基於統計/機器學習的異常檢測 監督式學習(supervised learning) 邏輯式回歸(logistic regression) 支持向量機(support vector machine) 隨機森林(random forest) XGBoost由於異常類別資料比例過少，通常我們需要作些調整! 常見類別不平衡處理方法 Up sampling Down sampling Weighted loss 非監督式學習(unsupervised learning) 孤立森林(Isolation forest) Local Outlier Factors One-class SVM 延伸閱讀 :mega: 機器學習 異常檢測 ( Anomaly detection ) 異常檢測 — 從統計建模的角度切入吧 Data Mining常見的(異常檢測)算法有哪些？ 使用AutoEncoder作異常檢測GAN與異常檢測的結合：GANomalyHackMD 使用教學 tags: 課堂筆記整理","link":"/2020/05/17/%E8%A3%BD%E9%80%A0%E8%B3%87%E6%96%99%E5%88%86%E6%9E%90/"},{"title":"使用kaggle API 快速download 數據","text":"步驟:1.安裝Kaggle API:(常用anaconda 安裝) windows系統上1pip install kaggle 安裝過程 Collecting kaggle Downloading https://files.pythonhosted.org/packages/62/ab/bb20f9b9e24f9a6250f95a432f8d9a7d745f8d24039d7a5a6eaadb7783ba/kaggle-1.5.6.tar.gz (58kB) |████████████████████████████████| 61kB 563kB/sRequirement already satisfied: urllib3&lt;1.25,&gt;=1.21.1 in c:\\users\\csie\\anaconda3\\lib\\site-packages (from kaggle) (1.24.2)Requirement already satisfied: six&gt;=1.10 in c:\\users\\csie\\anaconda3\\lib\\site-packages (from kaggle) (1.12.0)Requirement already satisfied: certifi in c:\\users\\csie\\anaconda3\\lib\\site-packages (from kaggle) (2019.9.11)Requirement already satisfied: python-dateutil in c:\\users\\csie\\anaconda3\\lib\\site-packages (from kaggle) (2.8.0)Requirement already satisfied: requests in c:\\users\\csie\\anaconda3\\lib\\site-packages (from kaggle) (2.22.0)Requirement already satisfied: tqdm in c:\\users\\csie\\anaconda3\\lib\\site-packages (from kaggle) (4.36.1)Collecting python-slugify (from kaggle) Downloading https://files.pythonhosted.org/packages/92/5f/7b84a0bba8a0fdd50c046f8b57dcf179dc16237ad33446079b7c484de04c/python-slugify-4.0.0.tar.gzRequirement already satisfied: idna&lt;2.9,&gt;=2.5 in c:\\users\\csie\\anaconda3\\lib\\site-packages (from requests-&gt;kaggle) (2.8)Requirement already satisfied: chardet&lt;3.1.0,&gt;=3.0.2 in c:\\users\\csie\\anaconda3\\lib\\site-packages (from requests-&gt;kaggle) (3.0.4)Collecting text-unidecode&gt;=1.3 (from python-slugify-&gt;kaggle) Downloading https://files.pythonhosted.org/packages/a6/a5/c0b6468d3824fe3fde30dbb5e1f687b291608f9473681bbf7dabbf5a87d7/text_unidecode-1.3-py2.py3-none-any.whl (78kB) |████████████████████████████████| 81kB 1.7MB/sBuilding wheels for collected packages: kaggle, python-slugify Building wheel for kaggle (setup.py) … done Created wheel for kaggle: filename=kaggle-1.5.6-cp37-none-any.whl size=72864 sha256=55598fc8b47b8a27cfcb8a85f8f118f8d8a015a335e7c4d0acc1fc72d4108557 Stored in directory: C:\\Users\\csie\\AppData\\Local\\pip\\Cache\\wheels\\57\\4e\\e8\\bb28d035162fb8f17f8ca5d42c3230e284c6aa565b42b72674 Building wheel for python-slugify (setup.py) … done Created wheel for python-slugify: filename=python_slugify-4.0.0-py2.py3-none-any.whl size=5493 sha256=b58d499644226d387160dcb4df496eec109d280628a441b0a4e2854775b616ae Stored in directory: C:\\Users\\csie\\AppData\\Local\\pip\\Cache\\wheels\\11\\94\\81\\312969455540cb0e6a773e5d68a73c14128bfdfd4a7969bb4fSuccessfully built kaggle python-slugifyInstalling collected packages: text-unidecode, python-slugify, kaggleSuccessfully installed kaggle-1.5.6 python-slugify-4.0.0 text-unidecode-1.3 2. 登錄自己的Kaggle ，並進入Account: 選擇create NEW API Token，下載一個json file，到~/.kaggle資料夾； 如果找不到 user/.kaggle 的資料夾，就創一個資料夾1mkdir .kaggle 使用kaggle下載數據集 : 比如Credit Card Fraud Detection DataSet(信用卡詐騙檢測)Credit Card Fraud Detection1kaggle datasets download -d mlg-ulb/creditcardfraud 安裝過程 Downloading creditcardfraud.zip to F:\\kaggle_dataset 2%|▊ | 1.00M/66.0M [00:00&lt;00:20, 3.39MB/s] 3%|█▋ | 2.00M/66.0M [00:00&lt;00:19, 3.50MB/s 5%|██▍ | 3.00M/66.0M [00:00&lt;00:17, 3.78MB/ 6%|███▎ | 4.00M/66.0M [00:01&lt;00:15, 4.10MB 8%|████ | 5.00M/66.0M [00:01&lt;00:14, 4.44MB 9%|████▉ | 6.00M/66.0M [00:01&lt;00:13, 4.70M 11%|█████▋ | 7.00M/66.0M [00:01&lt;00:12, 5.01 12%|██████▌ | 8.00M/66.0M [00:01&lt;00:11, 5.3 14%|███████▎ | 9.00M/66.0M [00:01&lt;00:10, 5. 15%|████████▏ | 10.0M/66.0M [00:02&lt;00:10, 5 17%|█████████ | 11.0M/66.0M [00:02&lt;00:09, 5 18%|█████████▊ | 12.0M/66.0M [00:02&lt;00:09, 20%|██████████▋ | 13.0M/66.0M [00:02&lt;00:09, 21%|███████████▍ | 14.0M/66.0M [00:02&lt;00:08 23%|████████████▎ | 15.0M/66.0M [00:02&lt;00:0 24%|█████████████ | 16.0M/66.0M [00:03&lt;00:0 26%|█████████████▉ | 17.0M/66.0M [00:03&lt;00: 27%|██████████████▋ | 18.0M/66.0M [00:03&lt;00 29%|███████████████▌ | 19.0M/66.0M [00:03&lt;0 30%|████████████████▍ | 20.0M/66.0M [00:03&lt; 32%|█████████████████▏ | 21.0M/66.0M [00:03 33%|██████████████████ | 22.0M/66.0M [00:04 35%|██████████████████▊ | 23.0M/66.0M [00:0 36%|███████████████████▋ | 24.0M/66.0M [00: 38%|████████████████████▍ | 25.0M/66.0M [00 39%|█████████████████████▎ | 26.0M/66.0M [0 41%|██████████████████████ | 27.0M/66.0M [0 42%|██████████████████████▉ | 28.0M/66.0M [ 44%|███████████████████████▋ | 29.0M/66.0M 45%|████████████████████████▌ | 30.0M/66.0M 47%|█████████████████████████▍ | 31.0M/66.0 49%|██████████████████████████▏ | 32.0M/66. 50%|███████████████████████████ | 33.0M/66. 52%|███████████████████████████▊ | 34.0M/66 53%|████████████████████████████▋ | 35.0M/6 55%|█████████████████████████████▍ | 36.0M/ 56%|██████████████████████████████▎ | 37.0M 58%|███████████████████████████████ | 38.0M 59%|███████████████████████████████▉ | 39.0 61%|████████████████████████████████▊ | 40. 62%|█████████████████████████████████▌ | 41 64%|██████████████████████████████████▍ | 4 65%|███████████████████████████████████▏ | 67%|████████████████████████████████████ | 68%|████████████████████████████████████▊ | 70%|█████████████████████████████████████▋ 71%|██████████████████████████████████████▍ 73%|███████████████████████████████████████▎ 74%|████████████████████████████████████████ 76%|████████████████████████████████████████▉ 77%|█████████████████████████████████████████▊ 79%|██████████████████████████████████████████▌ 80%|███████████████████████████████████████████▍ 82%|████████████████████████████████████████████▏ 83%|█████████████████████████████████████████████ 85%|█████████████████████████████████████████████▊ 86%|██████████████████████████████████████████████ 88%|██████████████████████████████████████████████ 89%|██████████████████████████████████████████████ 91%|██████████████████████████████████████████████ 92%|██████████████████████████████████████████████ 94%|██████████████████████████████████████████████ 96%|██████████████████████████████████████████████ 97%|██████████████████████████████████████████████ 99%|██████████████████████████████████████████████100%|██████████████████████████████████████████████████████| 66.0M/66.0M [00:12&lt;00:00, 4.34MB/s]100%|██████████████████████████████████████████████████████| 66.0M/66.0M [00:12&lt;00:00, 5.62MB/s] 下載的資料在剛剛下command的路徑: creditcardfraud.zip","link":"/2020/05/12/kaggle-api/"},{"title":"變更Jupyter Notebook預設瀏覽器","text":"變更Jupyter Notebook預設瀏覽器 1conda activate keras_gpu 1jupyter notebook --generate-config 1c.NotebookApp.browser = u'C:/Program Files (x86)/Google/Chrome/Application/chrome.exe %s' chrome瀏覽器檔案位置=C:/Program Files (x86)/Google/Chrome/Application/chrome.exe 打開Jupyter Notebook確認一下","link":"/2020/06/11/%E8%AE%8A%E6%9B%B4Jupyter-Notebook%E9%A0%90%E8%A8%AD%E7%80%8F%E8%A6%BD%E5%99%A8/"}],"tags":[{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"python","slug":"python","link":"/tags/python/"}],"categories":[{"name":"hexo","slug":"hexo","link":"/categories/hexo/"},{"name":"python","slug":"python","link":"/categories/python/"},{"name":"tag_replace_process","slug":"python/tag-replace-process","link":"/categories/python/tag-replace-process/"},{"name":"deep_learing","slug":"python/deep-learing","link":"/categories/python/deep-learing/"},{"name":"異常檢測","slug":"python/異常檢測","link":"/categories/python/%E7%95%B0%E5%B8%B8%E6%AA%A2%E6%B8%AC/"},{"name":"kaggle_api","slug":"python/kaggle-api","link":"/categories/python/kaggle-api/"}]}