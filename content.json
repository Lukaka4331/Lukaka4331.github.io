{"pages":[],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/05/08/hello-world/"},{"title":"資料標籤處理(Tag_Process)","text":"使用套件12345import requestsfrom bs4 import BeautifulSoupimport pandas as pdimport refrom tqdm.notebook import tqdm tag替換字元 1234list_text = ['#網美必拍#夏天戲水#單車漫遊#逛老街']NEW_String = list(map(lambda list_text: list_text.replace('#網美必拍','#打卡熱點'), list_text))print(list_text)print(NEW_String) input:[‘#網美必拍#夏天戲水#單車漫遊#逛老街’]output:[‘#打卡熱點#夏天戲水#單車漫遊#逛老街’] 判斷功能12345data_2020_ok=[data_tag[4]]print(data_2020_ok)print('#網美必拍' in data_2020_ok[0])x = \"hello world\"print('hello' in x) output_1 : [‘#網美必拍#夏天戲水#單車漫遊#逛老街’]output_2 : Trueoutput_3 : True 替換字元+判斷功能12345678910111213141516data_try={}data_try['try_tag']=[]data_2020_ok=[data_tag[4]]#判斷字串中有無在陣列裡if '#網美必拍' in data_2020_ok[0] or '#文青必訪' in data_2020_ok[0]:#如果有，進行替換自元的處理 print('have') data_process_1 = list(map(lambda data_2020_ok: data_2020_ok.replace('#網美必拍','#打卡熱點'), data_2020_ok)) data_try['try_tag'].extend(data_process_1) print(data_try['try_tag']) else :#如果沒有，輸出原陣列 print('not have') print(data_2020_ok) 條件成立: output_1 : have output_2 : [‘#打卡熱點#夏天戲水#單車漫遊#逛老街’] 不需要的tag台灣燈會生態體驗部落旅遊戰地文化鐵道旅遊","link":"/2020/05/10/tag-process/"},{"title":"製造資料分析","text":"Introduction甚麼是異常檢測(Anomaly/Outlier detection) .blue { color: blue; } .red { color: red; } .orange { color: orange; } .purple { color: purple; } 區分資料是正常還是異常 異常檢測的性質 異常檢測與正常資料有差異 異常檢測→罕見資料(==1%==) 那些情境會遇到異常資料 設備機台、網路瀏覽、信用卡紀錄 基於統計/傳統機器學習所提出的異常檢測方法理想狀況下的的異常檢測 Source from: Pattern Recognition “Anomaly Detection Challenges” 基於統計/機器學習的異常檢測 監督式學習(supervised learning) 邏輯式回歸(logistic regression) 支持向量機(support vector machine) 隨機森林(random forest) XGBoost由於異常類別資料比例過少，通常我們需要作些調整! 常見類別不平衡處理方法 Up sampling Down sampling Weighted loss 非監督式學習(unsupervised learning) 孤立森林(Isolation forest) Local Outlier Factors One-class SVM 延伸閱讀 :mega: 機器學習 異常檢測 ( Anomaly detection ) 異常檢測 — 從統計建模的角度切入吧 Data Mining常見的(異常檢測)算法有哪些？ 使用AutoEncoder作異常檢測GAN與異常檢測的結合：GANomalyHackMD 使用教學 tags: 課堂筆記整理","link":"/2020/05/17/%E8%A3%BD%E9%80%A0%E8%B3%87%E6%96%99%E5%88%86%E6%9E%90/"},{"title":"使用kaggle API 快速download 數據","text":"步驟:1.安裝Kaggle API:(常用anaconda 安裝) windows系統上1pip install kaggle 安裝過程 Collecting kaggle Downloading https://files.pythonhosted.org/packages/62/ab/bb20f9b9e24f9a6250f95a432f8d9a7d745f8d24039d7a5a6eaadb7783ba/kaggle-1.5.6.tar.gz (58kB) |████████████████████████████████| 61kB 563kB/sRequirement already satisfied: urllib3&lt;1.25,&gt;=1.21.1 in c:\\users\\csie\\anaconda3\\lib\\site-packages (from kaggle) (1.24.2)Requirement already satisfied: six&gt;=1.10 in c:\\users\\csie\\anaconda3\\lib\\site-packages (from kaggle) (1.12.0)Requirement already satisfied: certifi in c:\\users\\csie\\anaconda3\\lib\\site-packages (from kaggle) (2019.9.11)Requirement already satisfied: python-dateutil in c:\\users\\csie\\anaconda3\\lib\\site-packages (from kaggle) (2.8.0)Requirement already satisfied: requests in c:\\users\\csie\\anaconda3\\lib\\site-packages (from kaggle) (2.22.0)Requirement already satisfied: tqdm in c:\\users\\csie\\anaconda3\\lib\\site-packages (from kaggle) (4.36.1)Collecting python-slugify (from kaggle) Downloading https://files.pythonhosted.org/packages/92/5f/7b84a0bba8a0fdd50c046f8b57dcf179dc16237ad33446079b7c484de04c/python-slugify-4.0.0.tar.gzRequirement already satisfied: idna&lt;2.9,&gt;=2.5 in c:\\users\\csie\\anaconda3\\lib\\site-packages (from requests-&gt;kaggle) (2.8)Requirement already satisfied: chardet&lt;3.1.0,&gt;=3.0.2 in c:\\users\\csie\\anaconda3\\lib\\site-packages (from requests-&gt;kaggle) (3.0.4)Collecting text-unidecode&gt;=1.3 (from python-slugify-&gt;kaggle) Downloading https://files.pythonhosted.org/packages/a6/a5/c0b6468d3824fe3fde30dbb5e1f687b291608f9473681bbf7dabbf5a87d7/text_unidecode-1.3-py2.py3-none-any.whl (78kB) |████████████████████████████████| 81kB 1.7MB/sBuilding wheels for collected packages: kaggle, python-slugify Building wheel for kaggle (setup.py) … done Created wheel for kaggle: filename=kaggle-1.5.6-cp37-none-any.whl size=72864 sha256=55598fc8b47b8a27cfcb8a85f8f118f8d8a015a335e7c4d0acc1fc72d4108557 Stored in directory: C:\\Users\\csie\\AppData\\Local\\pip\\Cache\\wheels\\57\\4e\\e8\\bb28d035162fb8f17f8ca5d42c3230e284c6aa565b42b72674 Building wheel for python-slugify (setup.py) … done Created wheel for python-slugify: filename=python_slugify-4.0.0-py2.py3-none-any.whl size=5493 sha256=b58d499644226d387160dcb4df496eec109d280628a441b0a4e2854775b616ae Stored in directory: C:\\Users\\csie\\AppData\\Local\\pip\\Cache\\wheels\\11\\94\\81\\312969455540cb0e6a773e5d68a73c14128bfdfd4a7969bb4fSuccessfully built kaggle python-slugifyInstalling collected packages: text-unidecode, python-slugify, kaggleSuccessfully installed kaggle-1.5.6 python-slugify-4.0.0 text-unidecode-1.3 2. 登錄自己的Kaggle ，並進入Account: 選擇create NEW API Token，下載一個json file，到~/.kaggle資料夾； 如果找不到 user/.kaggle 的資料夾，就創一個資料夾1mkdir .kaggle 使用kaggle下載數據集 : 比如Credit Card Fraud Detection DataSet(信用卡詐騙檢測)Credit Card Fraud Detection1kaggle datasets download -d mlg-ulb/creditcardfraud 安裝過程 Downloading creditcardfraud.zip to F:\\kaggle_dataset 2%|▊ | 1.00M/66.0M [00:00&lt;00:20, 3.39MB/s] 3%|█▋ | 2.00M/66.0M [00:00&lt;00:19, 3.50MB/s 5%|██▍ | 3.00M/66.0M [00:00&lt;00:17, 3.78MB/ 6%|███▎ | 4.00M/66.0M [00:01&lt;00:15, 4.10MB 8%|████ | 5.00M/66.0M [00:01&lt;00:14, 4.44MB 9%|████▉ | 6.00M/66.0M [00:01&lt;00:13, 4.70M 11%|█████▋ | 7.00M/66.0M [00:01&lt;00:12, 5.01 12%|██████▌ | 8.00M/66.0M [00:01&lt;00:11, 5.3 14%|███████▎ | 9.00M/66.0M [00:01&lt;00:10, 5. 15%|████████▏ | 10.0M/66.0M [00:02&lt;00:10, 5 17%|█████████ | 11.0M/66.0M [00:02&lt;00:09, 5 18%|█████████▊ | 12.0M/66.0M [00:02&lt;00:09, 20%|██████████▋ | 13.0M/66.0M [00:02&lt;00:09, 21%|███████████▍ | 14.0M/66.0M [00:02&lt;00:08 23%|████████████▎ | 15.0M/66.0M [00:02&lt;00:0 24%|█████████████ | 16.0M/66.0M [00:03&lt;00:0 26%|█████████████▉ | 17.0M/66.0M [00:03&lt;00: 27%|██████████████▋ | 18.0M/66.0M [00:03&lt;00 29%|███████████████▌ | 19.0M/66.0M [00:03&lt;0 30%|████████████████▍ | 20.0M/66.0M [00:03&lt; 32%|█████████████████▏ | 21.0M/66.0M [00:03 33%|██████████████████ | 22.0M/66.0M [00:04 35%|██████████████████▊ | 23.0M/66.0M [00:0 36%|███████████████████▋ | 24.0M/66.0M [00: 38%|████████████████████▍ | 25.0M/66.0M [00 39%|█████████████████████▎ | 26.0M/66.0M [0 41%|██████████████████████ | 27.0M/66.0M [0 42%|██████████████████████▉ | 28.0M/66.0M [ 44%|███████████████████████▋ | 29.0M/66.0M 45%|████████████████████████▌ | 30.0M/66.0M 47%|█████████████████████████▍ | 31.0M/66.0 49%|██████████████████████████▏ | 32.0M/66. 50%|███████████████████████████ | 33.0M/66. 52%|███████████████████████████▊ | 34.0M/66 53%|████████████████████████████▋ | 35.0M/6 55%|█████████████████████████████▍ | 36.0M/ 56%|██████████████████████████████▎ | 37.0M 58%|███████████████████████████████ | 38.0M 59%|███████████████████████████████▉ | 39.0 61%|████████████████████████████████▊ | 40. 62%|█████████████████████████████████▌ | 41 64%|██████████████████████████████████▍ | 4 65%|███████████████████████████████████▏ | 67%|████████████████████████████████████ | 68%|████████████████████████████████████▊ | 70%|█████████████████████████████████████▋ 71%|██████████████████████████████████████▍ 73%|███████████████████████████████████████▎ 74%|████████████████████████████████████████ 76%|████████████████████████████████████████▉ 77%|█████████████████████████████████████████▊ 79%|██████████████████████████████████████████▌ 80%|███████████████████████████████████████████▍ 82%|████████████████████████████████████████████▏ 83%|█████████████████████████████████████████████ 85%|█████████████████████████████████████████████▊ 86%|██████████████████████████████████████████████ 88%|██████████████████████████████████████████████ 89%|██████████████████████████████████████████████ 91%|██████████████████████████████████████████████ 92%|██████████████████████████████████████████████ 94%|██████████████████████████████████████████████ 96%|██████████████████████████████████████████████ 97%|██████████████████████████████████████████████ 99%|██████████████████████████████████████████████100%|██████████████████████████████████████████████████████| 66.0M/66.0M [00:12&lt;00:00, 4.34MB/s]100%|██████████████████████████████████████████████████████| 66.0M/66.0M [00:12&lt;00:00, 5.62MB/s] 下載的資料在剛剛下command的路徑: creditcardfraud.zip","link":"/2020/05/12/kaggle-api/"},{"title":"變更Jupyter Notebook預設瀏覽器","text":"變更Jupyter Notebook預設瀏覽器 前言使用Jupyter Notebook預設可能不是自己習慣的瀏覽器，來改成自己習慣的瀏覽器八 先產生配置的文件 進入Anaconda Prompt中輸入: 1conda activate keras_gpu 1jupyter notebook --generate-config 打開jupyter_notebook_config 修改預設瀏覽器我們找到c.NotebookApp.browser後 把註解取消並輸入瀏覽器的路徑記得要檔案複製的路徑要把斜線換邊!不然會讀不到喔! 1c.NotebookApp.browser = u'C:/Program Files (x86)/Google/Chrome/Application/chrome.exe %s' chrome瀏覽器檔案位置=C:/Program Files (x86)/Google/Chrome/Application/chrome.exe 打開Jupyter Notebook確認一下","link":"/2020/06/11/%E8%AE%8A%E6%9B%B4Jupyter-Notebook%E9%A0%90%E8%A8%AD%E7%80%8F%E8%A6%BD%E5%99%A8/"},{"title":"Python 環境建置","text":"vscode 俗稱 VS Code 近日最受歡迎的編輯器 整合版本控制 內建除錯模式 多元的擴充套件 Download Visual Studio Code vscode-terminal環境設置 Windows 設定 1conda init cmd.exe 設定完記得重開一個terminal做測試 1conda 1conda --version Anaconda 跨平台 Python 環境懶人包/大補帖/總匯 python 虛擬環境 python版本管理 相依套件管理 資料處理套件 互動式 python 執行介面 其它 python 虛擬環境 pyenv Download Anaconda 安裝 https://repo.anaconda.com/archive/ Windows 安裝注意事項 安裝時要勾選設定環境變數 必須從 C:\\Users&lt;username&gt;\\anaconda3\\Library\\bin\\ 複製 libcrypto-1_1-x64.dll 及 libssl-1_1-x64.dll 至 C:\\Users&lt;username&gt;\\anaconda3\\DLLs\\ Mac OS 安裝注意事項 echo ‘export PATH=”/opt/anaconda3/bin:$PATH”‘ &gt;&gt; ~/.bashrc source ~/.bashrc 確認安裝成功 conda –version 記得在安裝的過程中把「將 Anaconda 加入 PATH 環境變數」與「將 Anaconda 註冊為預設 Python」這兩個複選框打勾，這會節省後續可能遭遇的問題。例如電腦認不得 Python 或者 conda 指令。 環境變數的path確認(通常有抓到的話會直接幫你帶入，沒有的話就在加入就好了) C:\\Users\\xxx\\anaconda3 C:\\Users\\xxx\\anaconda3\\Library\\mingw-w64\\bin C:\\Users\\xxx\\anaconda3\\Library\\usr\\bin C:\\Users\\xxx\\anaconda3\\Library\\bin C:\\Users\\xxx\\anaconda3\\Scripts 輕鬆學習 Python：conda 的核心功能 github_solution 虛擬環境設置1conda create --name py38 python=3.8 1conda env list 1conda activate py38 退出虛擬環境1conda deactivate 移除虛擬環境1conda env remove --name py38 相依管理-Package Manager常見相依管理工具 pip conda 在開發 Python app 或是 Python library 時 很重要的一件事情是 紀錄這一個 application 使用了哪些第三方的模組 當我們使用 Virtualenv 或 venv (Python3) 從一個乾淨的虛擬環境下 透過 pip 安裝所需要的第三方模組 pip freeze會列出所有被安裝的 python 模組及其版本 1pip freeze &gt; requirements.txt 例如 123456certifi==2020.6.20chardet==3.0.4idna==2.10requests==2.24.0urllib3==1.25.10wincertstore==0.2 未來要重現環境時 輸入 1pip -r requirements.txt 就可以取得相同的環境 這做法相當適合 在 production 的環境下運行的 application 然而這一個做法有幾個缺點 不易升級所使用的 module 不易看出 此專案所依賴的 top dependencies 為了解決這樣的問題 一個簡單的做法是 維護兩份文件 requirements.txt requirements-to-freeze.txt 其中 requirements-to-freeze.txt 紀錄你的專案所依賴的 top-level dependencies requirements.txt紀錄 pip freeze 的結果 範例 project-repo 為目標資料夾 123cd project-repopip install -r requirements-to-freeze.txt --upgradepip freeze &gt; requirements.txt 參考資料: pip workflow 管理 requirement.txt 變更Jupyter Notebook預設瀏覽器 變更Jupyter Notebook預設瀏覽器 pip or conda 安裝pip : 相對適合小的packageconda : 適合比較大的package，比如:tensorflow Docker 安装 Python假如環境比較雜亂的話，是個可以嘗試的方法 Docker 安装 Python","link":"/2020/08/10/Python%20%E7%92%B0%E5%A2%83%E5%BB%BA%E7%BD%AE/"},{"title":"Learning to Segment Every Thing","text":"- 𝑀𝑎𝑠𝑘X𝑅𝐶𝑁𝑁Abstract 標註新內容的成本很高 提出一個新的部分監督方法來傳遞權重(weight)的函數 大量的類別標註bounding box dataset : Visual Genome dataset 只有小部分標註Segmentation dataset : COCO dataset Introduction 預測一個前景的segmentation mask 對於每個偵測物件 典型的instance segmentation 只有包括大約100個物件種類 這種限制的一個原因是最新技術實例分割算法需要有強力的監督，而這種監督可能是有限且昂貴的收集新類別 標註預測框更豐富也更便宜 paper介紹一個新的部分監督instance segmentation任務,提出一個新穎的遷移式學習方法來解決 部分監督instance segmentation任務如下: 給定一組感興趣的類別，一小部分具有instance mask 標註，而其他類別只有邊界框標註 training data 是帶有強烈的標註(有mask)和只有位置的標註(only bounding box - predict box ) 主要效益 部分監督vs弱監督 training 建立large-scale的instance segmentation model 利用現有資料集的兩種型態: 使用邊框標註在很多類別,比如:Visual Genome - dataset 使用instance mask標註在小類別上,比如 : COCO - dataset 解決部分監督的instance segmentation 提出一個新穎的遷移式學習方法建立在Mask R-CNN","link":"/2020/09/19/Learning%20to%20Segment%20Every%20Thing%20-%20%F0%9D%91%80%F0%9D%91%8E%F0%9D%91%A0%F0%9D%91%98X%F0%9D%91%85%F0%9D%90%B6%F0%9D%91%81%F0%9D%91%81/"}],"tags":[{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"python","slug":"python","link":"/tags/python/"},{"name":"model_note","slug":"model-note","link":"/tags/model-note/"}],"categories":[{"name":"hexo","slug":"hexo","link":"/categories/hexo/"},{"name":"python","slug":"python","link":"/categories/python/"},{"name":"tag_replace_process","slug":"python/tag-replace-process","link":"/categories/python/tag-replace-process/"},{"name":"異常檢測","slug":"python/異常檢測","link":"/categories/python/%E7%95%B0%E5%B8%B8%E6%AA%A2%E6%B8%AC/"},{"name":"kaggle_api","slug":"python/kaggle-api","link":"/categories/python/kaggle-api/"},{"name":"Jupyter-Notebook","slug":"python/Jupyter-Notebook","link":"/categories/python/Jupyter-Notebook/"},{"name":"環境建置","slug":"python/環境建置","link":"/categories/python/%E7%92%B0%E5%A2%83%E5%BB%BA%E7%BD%AE/"},{"name":"ObjectDetection_paper","slug":"ObjectDetection-paper","link":"/categories/ObjectDetection-paper/"}]}